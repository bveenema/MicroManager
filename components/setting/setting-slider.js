// Local Imports
const SettingBase = require('./setting-base.js')
const Loader = require('../loader/loader.js')

class SettingSlider extends SettingBase {
	constructor(settingObj, node_id) {
		super(settingObj, node_id)
		this.options = settingObj.options
		this.pickerState = 'closed'
		this.disabled = false
		this.OnMouseDownBind = this.OnMouseDown.bind(this)
		this.OnMouseUpBind = this.OnMouseUp.bind(this)
		this.OnMouseMoveBind = this.OnMouseMove.bind(this)
	}

	CreateDOMNode() {
		this.node = super.CreateDOMNode('setting-slider.mst', {
			title: this.name,
			currentValue: this.currentValue,
			nodeID: this.nodeID,
		})
		return this.node
	}

	// Init
	// Initializes the Slider by saving all the relavant items and setting the initial position
	// 	based on the default value
	Init() {
		this.leftTrack = this.node.querySelectorAll('.spectrum-Slider-track')[0]
		this.rightTrack= this.node.querySelectorAll('.spectrum-Slider-track')[1]
		this.handle = this.node.querySelector('.spectrum-Slider-handle')
		this.valueOut = this.node.querySelector('.spectrum-Slider-value')
		this.loaderNode = this.node.querySelector('.component-loader')
		
		let position = this.ValueToPosition(this.currentValue)
		this.MoveSlider(position)
	}

	// Move Slider 
	// Tansform tracks, handle and loader to the new position (0-100)
	// \param[number] - the new position of the slider (0-100)
	MoveSlider(position) {
		if(position < 0 || position > 100) return

		if (this.leftTrack && this.rightTrack) {
			this.leftTrack.style.width = position + '%'
			this.rightTrack.style.width = (100 - position) + '%'
		}
		this.handle.style.left = position + '%'
		this.loaderNode.style.left = position + '%'
	}

	// Calculate Position
	// Calculates the new position of the track from a DOM event
	// \param[event] - the event generated by the DOM
	CalculatePosition(e) {
		let sliderOffsetWidth = this.node.offsetWidth
		let sliderOffsetLeft = this.node.offsetLeft + this.node.offsetParent.offsetLeft

		let x = Math.max(Math.min(e.x-sliderOffsetLeft, sliderOffsetWidth), 0)
		return (x / sliderOffsetWidth) * 100
	}

	// Attach Listener
	// Adds an event listener for a mouse down on the element
	AttachListener(){
		this.node.addEventListener('mousedown', this.OnMouseDownBind)
	}

	// On Mouse Down
	// Event handler for mouse down. Determines the position of the mouse and moves the slider
	// Add a temporary listener for mouse move and mouse up
	// \param[event] - the event generated by the DOM
	OnMouseDown(e){
		if(this.disabled) return

		let position = this.CalculatePosition(e)
		this.MoveSlider(position)

		window.addEventListener('mouseup', this.OnMouseUpBind)
		window.addEventListener('mousemove', this.OnMouseMoveBind)
	}

	// On Mouse Move
	// Event handler for mouse move. Determines the position of the mouse and moves the slider
	// Updates the value out div
	// \param[event] - the event generated by the DOM
	OnMouseMove(e) {
		let position = this.CalculatePosition(e)
		this.MoveSlider(position)

		let value = this.PositionToValue(position)
		this.valueOut.innerText = value
	}

	// On Mouse Up
	// Event handler for mouse up. Removes the mouse up and mouse move listeners and updates the setting
	// \param[event] - the event generated by the DOM
	OnMouseUp(e) {
		window.removeEventListener('mouseup', this.OnMouseUpBind)
		window.removeEventListener('mousemove', this.OnMouseMoveBind)

		let position = this.CalculatePosition(e)
		this.UpdateSetting(position)
	}

	PositionToValue(position){
		if(typeof this.minValue !== 'undefined' 
		&& typeof this.maxValue !== 'undefined'){
			let value = position/100*(this.maxValue - this.minValue) + this.minValue
			if(this.isFloat){
				value = value.toFixed(this.floatPrecision)
			} else {
				value = value.toFixed(0)
			}
			return value
		}
		return position
	}

	ValueToPosition(value){
		if(typeof this.minValue !== 'undefined' 
		&& typeof this.maxValue !== 'undefined'){
			return ((value-this.minValue)/(this.maxValue - this.minValue))*100
		}
	}

	UpdateSetting(position){
		// Convert Position to value
		this.currentValue = this.PositionToValue(position)
		this.valueOut.innerText = this.currentValue

		// TODO Validate value
		// if(value < this.minValue || value > this.maxValue)
			

		// TODO send value to micro
		setTimeout(function(){ this.SetCurrentValue(this.currentValue) }.bind(this), 1000)
		
		// Disable the Slider
		this.node.querySelector('.spectrum-Slider').classList.add('is-disabled')
		this.disabled = true

		// Hide the handle
		this.handle.classList.add('invisible')

		// Display the loading icon
		this.loaders[0].SetState('loading')
	}

	SetCurrentValue(value){
		// check if currentValue is equal to incoming value
		//	value would not be equal if update unsuccessful or has changed indepenent of app
		if(this.currentValue !== value){
			this.valueOut.innerText = value
			let position = this.ValueToPosition(value)
			this.MoveSlider(position)
			this.currentValue = value
		}
		
		// if the loader is being displayed, transition back to regular display
		if(this.loaders[0].state === 'loading'){
			// Set the loader node to success
			this.loaders[0].SetState('success')

			// Delay, then show the handle and enable the slider
			setTimeout(function(){
				this.handle.classList.remove('invisible')
				this.node.querySelector('.spectrum-Slider').classList.remove('is-disabled')
				this.disabled = false
			}.bind(this), 1000)
		}
	}
}

module.exports = SettingSlider